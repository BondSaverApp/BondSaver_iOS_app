//
//  SettingsView.swift
//  KeepLink
//
//  Created by –ê–Ω–¥—Ä–µ–π –°—Ç–µ–ø–∞–Ω–æ–≤ on 17.05.2025.
//

//
//  SettingsView.swift
//  KeepLink
//
//  Created by ChatGPT on 17.05.2025.
//

import RealmSwift
import SwiftUI

struct SettingsView: View {
    @AppStorage("notificationsEnabled") private var notificationsEnabled: Bool = true
    @AppStorage("dailyReminderHour") private var dailyReminderHour: Int = 9

    @State private var showHourPicker: Bool = false

    var body: some View {
        NavigationStack {
            Form {
                Section("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è") {
                    Toggle(isOn: $notificationsEnabled) {
                        Label("–í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", systemImage: "bell")
                    }
                    .onChange(of: notificationsEnabled) { value in
                        if value {
                            scheduleReminderTask()
                        } else {
                            UNUserNotificationCenter.current().removeAllPendingNotificationRequests()
                        }
                    }

                    HStack {
                        Label("–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏", systemImage: "clock")
                        Spacer()
                        Button("\(dailyReminderHour):00") { showHourPicker.toggle() }
                            .buttonStyle(.borderless)
                    }
                }

                Section("–û—Ç–ª–∞–¥–∫–∞") {
                    Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ") {
                        triggerTestReminder()
                    }
                    Button("–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π") {
                        debugPrintPendingNotifications()
                    }
                    Button("–û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è") {
                        clearReminders()
                    }
                    .tint(.red)
                }
            }
            .navigationTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            .sheet(isPresented: $showHourPicker) {
                HourPickerView(selectedHour: $dailyReminderHour)
                    .presentationDetents([.medium])
                    .onDisappear {
                        rescheduleTaskFor(hour: dailyReminderHour)
                    }
            }
        }
    }

    // MARK: - Helpers

    func triggerTestReminder() {
        do {
            let realm = try Realm()
            // –ë–µ—Ä—ë–º 1‚Äì3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞)
            let contacts = realm.objects(Contact.self)
                .sorted(byKeyPath: "clientModifiedDate", ascending: false)
                .prefix(3)
            let names = contacts.map(\.firstName).joined(separator: ", ")

            let title = "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–≤—è–∑–∏"
            let body = "–¢–µ—Å—Ç: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å \(names)"

            // 1) –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            let content = UNMutableNotificationContent()
            content.title = title
            content.body = body
            content.sound = .default
            let request = UNNotificationRequest(
                identifier: UUID().uuidString,
                content: content,
                trigger: nil
            ) // —Å—Ä–∞–∑—É

            UNUserNotificationCenter.current().add(request)

            // 2) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Realm
            let reminder = Reminder()
            reminder.title = title
            reminder.body = body
            reminder.date = Date()
            reminder.relatedContactIds.append(objectsIn: contacts.map(\.id))

            try realm.write { realm.add(reminder) }

            print("‚úÖ Test reminder triggered")
        } catch {
            print("‚ùå Failed to trigger test reminder: \(error)")
        }
    }

    private func rescheduleTaskFor(hour _: Int) {
        UNUserNotificationCenter.current().removeAllPendingNotificationRequests()
        scheduleReminderTask() // simple: re‚Äëschedule with new begin date; production could set earliestBeginDate to next chosen hour
    }

    private func debugPrintPendingNotifications() {
        UNUserNotificationCenter.current().getPendingNotificationRequests { requests in
            print("üì¶ Pending: \(requests.count)")
            for r in requests {
                print(r)
            }
        }
    }

    private func clearReminders() {
        guard let realm = try? Realm() else { return }
        let all = realm.objects(Reminder.self)
        try? realm.write { realm.delete(all) }
    }
}

// Simple hour picker
struct HourPickerView: View {
    @Binding var selectedHour: Int

    var body: some View {
        Picker("–í—Ä–µ–º—è", selection: $selectedHour) {
            ForEach(0 ..< 24) { Text("\($0):00").tag($0) }
        }
        .pickerStyle(.wheel)
    }
}

#Preview {
    SettingsView()
}
